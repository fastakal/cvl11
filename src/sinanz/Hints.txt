in LinkedLines.
The Angles method is not helping in filtering out contours.

This method is helping in keeping the ellipse, but there's a MAGIC NUMBER IN IT. The ratio of zeros.
Actually, it works very well. It takes out almost all vertical lines (due to the nan slope).
bool LinkedLines::anglesDiffAcceptable(vector<float> anglesOfOneContour)


Magic numbers in both criterias, the relative ratio of the axes and the area of the rotated rectangle
bool MyEllipses::validateEllipse(cv:RotatedRect anEllipse)

Rotation of the ellipse is in the inverse direction, this is y in:
cv::Mat HoopPosition::rotatePlaneImage(cv::Mat& planeImage, double angle)
the angle was taken to be the negative of the input (double angle).

Treat the case where less than 4 points have valid depth values (pointer exception).
cv::vector<cv::Vec3f> HoopPosition::findPointsValues(int numberOfPoints)
TREATED: set the input image as the output if less than 4 valid points are there.

// Put the plane in.
float z = (A*((double) j)/dst.channels() + B*i + C)*2;

Assuming that the depth values are real, then the fitted plane is good to go.
A class is created that has the plane as an attribute.
It will take care of validating the plane, finding the normal to the plane, and 
calculating the destination point of the trajectory.
This class is called:
destination3dPoint.
this class takes one parameter, the hoop object (that contains the fitted plane and the centroid/size of the hoop).



ask the assistant
in plotplane:
float z = (A*((double) j)/dst.channels() + B*i + C)*4;


BUG:
void LinkedLines::connectRawLines(cv::vector<cv::vector<cv::Vec4f> > rLines, int maxDistance)






	/*
	// Print the sart Point:
	printf("GroundTruth: x: %f. y: %f. z: %f. \n", startPoint.x, startPoint.y, startPoint.z);

	float x = secondPoint.x;
	float y = secondPoint.y;
	float z = secondPoint.z;

	// Print the second Point:
	printf("Desination In Pixels: x: %f. y: %f. z: %f. \n", secondPoint.x, secondPoint.y, secondPoint.z);

	// Convert Image coordinates into frame coordinates.
	for(int i = 0; i < 3; i++){
		for(int j = 0; j < 3; j++){
			x = inverseK.at<float>(0,0) * x + inverseK.at<float>(0,1) * y + inverseK.at<float>(0,2) * z;
			y = inverseK.at<float>(1,0) * x + inverseK.at<float>(1,1) * y + inverseK.at<float>(1,2) * z;
		}
	}

	printf("Before Rotation (multiplied by the inverseK): x: %f. y: %f. z: %f. \n", x, y, z);

	endPoint.x = rotationMatrix.at<float>(0,0) * x + rotationMatrix.at<float>(0,1) * y + rotationMatrix.at<float>(0,2) * z;
	endPoint.y = rotationMatrix.at<float>(1,0) * x + rotationMatrix.at<float>(1,1) * y + rotationMatrix.at<float>(1,2) * z;;
	endPoint.z = rotationMatrix.at<float>(2,0) * x + rotationMatrix.at<float>(2,1) * y + rotationMatrix.at<float>(2,2) * z;;

	printf("After Rotation: x: %f. y: %f. z: %f. \n", endPoint.x, endPoint.y, endPoint.z);

	endPoint.x = endPoint.x + translationVector[0];
	endPoint.y = endPoint.y + translationVector[1];
	endPoint.z = endPoint.z + translationVector[2];

	printf("After Translation (FINAL): x: %f. y: %f. z: %f. \n", endPoint.x, endPoint.y, endPoint.z);

	 */
